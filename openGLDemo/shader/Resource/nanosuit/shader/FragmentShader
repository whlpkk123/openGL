#version 330 core

out vec4 FragColor;


in vec3 Normal;
in vec3 FragPos;

uniform vec3 viewPos;

uniform sampler2D texture_diffuse1;
uniform sampler2D texture_specular1;
in vec2 TexCoords;

//定向光结构体
struct DirLight {
    vec3 direction; //定向光方向
    vec3 ambient;   //环境光
    vec3 diffuse;   //漫反射光
    vec3 specular;  //镜面反射光
};
uniform DirLight dirLight;

//点光源结构体
struct PointLight {
    vec3 position;   //点光源位置
    
    float constant;  //衰减常量
    float linear;    //衰减1阶常量
    float quadratic; //衰减2阶常量
    
    vec3 ambient;    //环境光
    vec3 diffuse;    //漫反射光
    vec3 specular;   //镜面反射光
};
#define NR_POINT_LIGHTS 4
uniform PointLight pointLights[NR_POINT_LIGHTS];

//聚光源结构体
struct Spotlight {
    vec3 ambient;    //环境光
    vec3 diffuse;    //漫反射光
    vec3 specular;   //镜面反射光
    
    float constant;  //衰减常量
    float linear;    //衰减1阶常量
    float quadratic; //衰减2阶常量
    
    vec3 position;   //聚光源位置
    vec3 direction;  //聚光源指向的方向
    float cutOff;    //内圆锥切光角
    float outerCutOff; //外圆锥切光角
};
uniform Spotlight spotlight;


//计算定向光的贡献 light：定向光， normal：法线向量(标准化)，viewDir：视线方向(标准化)
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir);

//计算点光源的贡献 fragPos：当前片段位置
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 viewDir, vec3 fragPos);

//计算聚光源的贡献
vec3 CalcSpotlight(Spotlight light, vec3 normal, vec3 viewDir, vec3 fragPos);


void main() {
    
    vec3 norm = normalize(Normal); //法线向量(标准化)
    vec3 viewDir = normalize(viewPos - FragPos); //视线方向(标准化)
    
    // 第一阶段：定向光照
    vec3 result = CalcDirLight(dirLight, norm, viewDir);
    
    // 第三阶段： 聚光
    //result += CalcSpotlight(spotlight, norm, viewDir, FragPos);

    FragColor = vec4(result, 1.0);
    
    //FragColor = texture(texture_diffuse1, TexCoords);
}



vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir) {
    
    vec3 lightDir = normalize(-light.direction);

    //环境光照
    vec3 ambient = light.ambient * vec3(texture(texture_diffuse1, TexCoords));
    
    //漫反射光照
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * vec3(texture(texture_diffuse1, TexCoords));
    
    //镜面光照
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = light.specular * spec * vec3(texture(texture_specular1, TexCoords));
    
    return (ambient + diffuse + specular);
}

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 viewDir, vec3 fragPos) {
    vec3 lightDir = normalize(light.position - fragPos);

    //环境光照
    vec3 ambient = light.ambient * vec3(texture(texture_diffuse1, TexCoords));

    //漫反射光照
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * vec3(texture(texture_diffuse1, TexCoords));
    
    //镜面光照
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = light.specular * spec * vec3(texture(texture_specular1, TexCoords));
    
    //衰减
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;
    
    return (ambient + diffuse + specular);
}


vec3 CalcSpotlight(Spotlight light, vec3 normal, vec3 viewDir, vec3 fragPos) {
    vec3 lightDir = normalize(light.position - fragPos);
    
    //环境光照
    vec3 ambient = light.ambient * vec3(texture(texture_diffuse1, TexCoords));
    
    //漫反射光照
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * vec3(texture(texture_diffuse1, TexCoords));
    
    //镜面光照
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = light.specular * spec * vec3(texture(texture_specular1, TexCoords));
    
    //衰减
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));
    
    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;
    
    //平滑/软化边缘
    float theta = dot(lightDir, normalize(-light.direction));
    float epsilon   = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
    diffuse  *= intensity;
    specular *= intensity;
    
    return (ambient + diffuse + specular);
}

